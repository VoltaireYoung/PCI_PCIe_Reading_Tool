#include <Library/UefiBootServicesTableLib.h>

#include "MyACPI_V4.h"
#include "MyPCI.h"

#ifndef _MY_UI_H_
#define _MY_UI_H_

// Tool Information
CHAR8* AUTHOR = "Voltaire Chen";
CHAR8* VERSION = "01";

// Layer 1 Showing Specification
UINTN L1_TITLE_COLOR = 0x0A;
UINTN L1_ATTRIBUTE_BAR_COLOR = 0x0F;
UINTN L1_PCI_DEVICE_LIST_COLOR = 0x07;
UINTN L1_PCI_DEVICE_LIGHT = 0x0F;

UINT8 L1_TITLE_X = 0;
UINT8 L1_TITLE_Y = 0;

UINT8 L1_ATTRIBUTE_SERIAL_X = 2;
UINT8 L1_ATTRIBUTE_SERIAL_Y = 0;

CHAR8* L1_ATTRIBUTE_DESCRIPTION = "Device Description";
UINT8 L1_ATTRIBUTE_DESCRIPTION_X = 2;
UINT8 L1_ATTRIBUTE_DESCRIPTION_Y = 5;

CHAR8* L1_ATTRIBUTE_BUS = "Bus";
UINT8 L1_ATTRIBUTE_BUS_X = 2;
UINT8 L1_ATTRIBUTE_BUS_Y = 62;

CHAR8* L1_ATTRIBUTE_DEVICE = "Device";
UINT8 L1_ATTRIBUTE_DEVICE_X = 2;
UINT8 L1_ATTRIBUTE_DEVICE_Y = 68;

CHAR8* L1_ATTRIBUTE_PROGRAMMING_INTERFACE = "PI";
UINT8 L1_ATTRIBUTE_PROGRAMMING_INTERFACE_X = 2;
UINT8 L1_ATTRIBUTE_PROGRAMMING_INTERFACE_Y = 75;

UINT8 L1_LIST_LENGTH = 20;
UINT8 L1_LIST_START_X = 3;
UINT8 L1_LIST_SERIAL_Y = 0;
UINT8 L1_LIST_DESCRIPTION_Y = 5;
UINT8 L1_LIST_BUS_Y = 62;
UINT8 L1_LIST_DEVICE_Y = 68;
UINT8 L1_LIST_PROGRAMMING_INTERFACE = 75;

// L1 Showing
void Show_Layer_1(My_PCI_Device_List*);
void L1_Show_Arrtibutes_bar();
//void Show_PCI_Device_List(My_PCI_Device*,UINTN*,UINTN);
void L1_Show_PCI_Device_List(UINTN);
void Show_PCI_Device(My_PCI_Device*,UINTN,UINTN,UINTN);

// Layer 2 Showing Specification
#define PCIE_Offset(address , current_page) (address + current_page * (READ_PCI_ROW_RANGE * READ_PCI_COLUMN_RANGE))

#define PCI_PCIE_ADDRESS(base , bus , device , function) \
        (UINTN) ( (UINTN)base | \
                  ((UINTN)bus << 20) | \
                  ((UINTN)device << 15) | \
                  ((UINTN)function << 12) )

UINTN READ_PCI_ROW_RANGE = 16;
UINTN READ_PCI_COLUMN_RANGE = 16;

UINTN NUMBER_OF_PCIE_PAGES = 16;

UINTN L2_TITLE_COLOR = 0x0A;
UINTN L2_DESCRIPTION_COLOR = 0x0F;

UINT8 L2_TITLE_ROW = 0;
UINT8 L2_TITLE_COLUMN = 0;

UINT8 L2_DESCRIPTION_ROW = 1;
UINT8 L2_DESCRIPTION_COLUMN = 0;

UINT8 L2_DATA_POSITION_HORIZONTAL_BAR_ROW = 2 + 2;
UINT8 L2_DATA_POSITION_HORIZONTAL_BAR_COLUMN = 4;
UINT8 L2_DATA_POSITION_VERTICAL_BAR_ROW = 4 + 2;
UINT8 L2_DATA_POSITION_VERTICAL_BAR_COLUMN = 0;

UINT8 L2_DATA_POSITION_HORIZONTAL_SEPERATE_ROW = 4 + 1;
UINT8 L2_DATA_POSITION_HORIZONTAL_SEPERATE_COLUMN = 4;
UINT8 L2_DATA_POSITION_VERTICAL_SEPERATE_ROW = 6;
UINT8 L2_DATA_POSITION_VERTICAL_SEPERATE_COLUMN = 0 + 2;

UINT8 L2_DATA_WIDTH = 2;
UINT8 L2_DATA_ROW = 5 + 1;
UINT8 L2_DATA_COLUMN =6;

#endif

// L2 Showing
void Show_Layer_2(My_PCI_Device*);
void L2_Print_Data(UINTN**,UINTN,UINTN,UINTN);
void Clean_L2_Data();

// Base Component
void Show_Title(UINTN,UINTN,UINTN);
void Clean_Certain_Line(UINTN,UINTN);
UINT8 Check_PCIE(UINTN);

// Basic Component
// Clean all
void GUI_ScreenClean();
// Show Cursor
void GUI_ShowCursor(BOOLEAN);

void GUI_GetPosition(UINTN*,UINTN*);

void GUI_SetPosition(UINTN,UINTN);

void GUI_SetColor(UINTN);

void GUI_WaitKey(EFI_INPUT_KEY*);

int GUI_WaitKeyDelay(EFI_INPUT_KEY*,UINTN);

void GUI_Delay(UINTN);